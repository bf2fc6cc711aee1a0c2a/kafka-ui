{
  "home": {
    "basic": "Welcome to the Strimzi UI",
    "insert": "This includes an {{insert}}",
    "formatted": "This includes <strong>formatting</strong>",
    "formattedInsert": "This includes a formatted <strong>{{insert}}</strong> and {{another}}",
    "customInserts": "This paragraph contains multiple inserts. First {{insert}} is a <0>div with a classname</0>. Second is <1>bold</1>. Third is <2>italic</2>. Finally there is a <3>link</3>.",
    "customContent": "This is <0>Something</0>"
  },
  "common": {
    "errorBoundaryTitle": "Something went wrong",
    "unexpectedError": "There was a problem processing the request. Please try again.",
    "returnToHome": "Return to home"
  },
  "createTopic": {
    "topicNameLabelHead": "Topic name",
    "topicNameLabelBody": "This is the unique identifier for this topic within this cluster. You'll need this to set up your producers and consumers, so make it something memorable.",
    "partitionsLabelHead": "Partitions",
    "partitionsLabelBody": "A partition is an ordered list of messages. One or more partitions make up a topic.",
    "replicasLabelHead": "Replicas",
    "replicasLabelBody": "In order to improve availability, each topic can be replicated onto multiple brokers. If a following replica is keeping up with the partition leader, its replica is in-sync. Any follower with an in-sync replica can become the leader without losing any messages.",
    "inSyncReplicasLabelHead": "Minimum in-sync replicas",
    "inSyncReplicasLabelBody": "Determines the reliability guarantee achievable for this topic. The minimum number of replicas that must acknowledge a write to satisfy a producer that requests acknowledgements from all replicas. (min.insync.replicas)",
    "retentionTimeLabelHead": "Retention time",
    "retentionTimeLabelBody": "The length of time that messages are retained before they are deleted. If your messages are not read by a consumer within this time, they will be missed. (retention.ms)",
    "maxMessageSizeLabelHead": "Maximum message size",
    "maxMessageSizeLabelBody": "The maximum record batch size. (max.message.bytes)",
    "messageTimestampLabelHead": "Message timestamp type",
    "messageTimestampLabelBody": "Determines if the timestamp is made when the message is created or when the message is appended to the log. (message.timestamp.type)",
    "messageTimestampDiffLabelHead": "Maximum message timestamp difference",
    "messageTimestampDiffLabelBody": "The maximum difference allowed between the timestamp of the message leaving the producer and arriving at the broker. (message.timestamp.difference.max.ms)",
    "compressionTypeLabelHead": "Compression type",
    "compressionTypeLabelBody": "Determines the final compression for the topic, or whether to retain the compression set by the producer. (compression.type)",
    "messageFormatLabelHead": "Message format version",
    "messageFormatLabelBody": "Specify the message format version the broker will use to append messages to the logs.",
    "cleanupPolicyLabelHead": "Cleanup policy",
    "cleanupPolicyLabelBody": "Determines what happens to log segments beyond the retention window. (cleanup.policy)",
    "retentionBytesLabelHead": "Retention size",
    "retentionBytesLabelBody": "The maximum total size of a partition's log segments before old log segments are deleted to free up space. (retention.bytes)",
    "logSegmentLabelHead": "Log segment size",
    "logSegmentLabelBody": "The size of the log segment files. Log processing such as deletion and compaction operates on log segments, so a larger setting gives fewer files but less frequent log processing. (segment.bytes)",
    "leaderElectionLabelHead": "Unclean leader election",
    "leaderElectionLabelBody": "Allows a replica which is not in-sync to become the leader of the partition. This is only done as a last resort and can lead to data loss. (unclean.leader.election.enable)",
    "followerReplicaLabelHead": "Follower replication throttled replicas",
    "followerReplicaLabelBody": "A list of the replicas for which replication should be throttled on the follower side. Can be used to limit the network bandwidth consumed by replication. (follower.replication.throttled.replicas)",
    "leaderReplicaLabelHead": "Leader replication throttled replicas",
    "leaderReplicaLabelBody": "A list of the replicas for which replication should be throttled on the leader side. Can be used to limit the network bandwidth consumed by replication. (leader.replication.throttled.replicas)",
    "deleteRetentionLabelHead": "Delete retention time",
    "deleteRetentionLabelBody": "Determines the time for which tombstone markers are retained if the topic is compacted. (delete.retention.ms)",
    "minRatioLabelHead": "Minimum cleanable dirty ratio",
    "minRatioLabelBody": "Determines the frequency of compacting the log in terms of the proportion of duplicated keys allowed. Applies only to compacted topics. (min.cleanable.dirty.ratio)",
    "minLagLabelHead": "Minimum compaction lag time",
    "minLagLabelBody": "The minimum time a message will remain uncompacted. Applies only to compacted topics. (min.compaction.lag.ms)",
    "segementTimeLabelHead": "Segment time",
    "segementTimeLabelBody": "The period of time after which the current log segment is rolled even if it is not full. This permits log processing such as deletion and compaction to proceed for quiet topics. (segment.ms)",
    "jitterTimeLabelHead": "Segment jitter time",
    "jitterTimeLabelBody": "Controls a random delay to add to log segment rolling with the aim of preventing bursts of log segment rolling activity. (segment.jitter.ms)",
    "deleteDelayLabelHead": "File delete delay",
    "deleteDelayLabelBody": "The delay before deleting a file from the filesystem. (file.delete.delay.ms)",
    "preallocateLabelHead": "Preallocate log segment files",
    "preallocateLabelBody": "Determines whether to preallocate log segment files. (preallocate)",
    "indexIntervalLabelHead": "Index interval size",
    "indexIntervalLabelBody": "Determines the granularity of the offset index. (index.interval.bytes)",
    "segementIntervalLabelHead": "Segment index size",
    "segementIntervalLabelBody": "The size of the index that maps offsets to file positions. (segment.index.bytes)",
    "intervalMessagesLabelHead": "Flush interval messages",
    "intervalMessagesLabelBody": "Determines the number of messages between flushing data to the log. Replication is a better way to ensure data is not lost when failures occur. (flush.messages)",
    "intervalTimeLabelHead": "Flush interval time",
    "intervalTimeLabelBody": "Determines the interval in time between flushing data to the log. Replication is a better way to ensure data is not lost when failures occur. (flush.ms)",
    "coreConfigInfo": "Before deploying your topic, we recommend entering all core configuration details.",
    "messageSectionInfo": "Control how your messages will be handled in the Kafka instance.",
    "logSectionInfo": "Define how your log is handled.",
    "logSectionInfoNote": "Note: Messages are continually appended to the partitionâ€™s log and assigned their offset.",
    "replicationSectionInfo": "Control the behavior of your replicas.",
    "replicationSectionInfoNote": "Each of these parameter impacts every replica created in this topic.",
    "cleanupSectionInfo": "Control the cleanup processing of the log.",
    "indexSectionInfo": "Control the indexing of the log.",
    "flushSectionInfo": "Control the frequency of the flushing of the log.",
    "deleteTopicInfo": "This permanently removes this topic from this instance. Applications will no longer have access to this topic."
  }
}
