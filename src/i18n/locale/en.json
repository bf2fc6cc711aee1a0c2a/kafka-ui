{
  "home": {
    "basic": "Welcome to the Strimzi UI",
    "insert": "This includes an {{insert}}",
    "formatted": "This includes <strong>formatting</strong>",
    "formattedInsert": "This includes a formatted <strong>{{insert}}</strong> and {{another}}",
    "customInserts": "This paragraph contains multiple inserts. First {{insert}} is a <0>div with a classname</0>. Second is <1>bold</1>. Third is <2>italic</2>. Finally there is a <3>link</3>.",
    "customContent": "This is <0>Something</0>"
  },
  "common": {
    "delete": "Delete",
    "edit": "Edit",
    "name": "Name",
    "replicas": "Replicas",
    "partitions": "Partitions",
    "search": "Search",
    "cancel": "Cancel",
    "deleteTopic": "Delete Topic",
    "errorBoundaryTitle": "Something went wrong",
    "unexpectedError": "There was a problem processing the request. Please try again.",
    "returnToHome": "Return to home"
  },
  "topicList": {
    "topicListTable": "Topic List Table",
    "topicSearchInput": "Topic search input",
    "emptyTopicHead": "You don't have any topics yet",
    "emptyTopicBody": "Create a topic by clicking the button below to get started",
    "emptySearchHead": "No results found",
    "emptySearchBody": "No result match the filter criteria. Remove filter or clear all filters to show results",
    "deleteModalAriaLabel": "Delete topic modal",
    "deleteModalTitle": "Delete Topic  ?",
    "deleteModalText": "The Topic will be deleted"
  },
  "createTopic": {
    "enterName": "Enter topic name",
    "createTopic": "Create topic",
    "topicNameLabelHead": "Topic name",
    "topicNameLabelBody": "Topic name is the unique identifier for this topic within this cluster. You need this to set up your producers and consumers, so make it something memorable.",
    "partitionsLabelHead": "Partitions",
    "partitionsLabelBody": "Partitions are distinct lists of messages within a topic. Partitions are the main concurrency mechanism in Kafka and enable parts of a topic to be distributed over multiple brokers in the cluster.  A topic can contain one or more partitions, enabling producer and consumer loads to be scaled. The number of partitions in a topic cannot be changed once the topic is created.",
    "replicasLabelHead": "Replicas",
    "replicasLabelBody": "Replicas are copies of partitions in a topic. Partition replicas are distributed over multiple brokers in the cluster to ensure topic availability if a broker fails. When a follower replica is in sync with a partition leader, the follower replica can become the new partition leader if needed. (replication.factor)",
    "inSyncReplicasLabelHead": "Minimum in-sync replicas",
    "inSyncReplicasLabelBody": "Minimum in-sync replicas is the minimum number of replicas that must acknowledge a write for the write to be considered successful. This property assumes that the producer requests acknowledgements from all replicas (`acks` set to `all`). If this minimum is not met, the producer raises an exception (`NotEnoughReplicas` or `NotEnoughReplicasAfterAppend`). Typically you create a topic with a replication factor of 3, set `min.insync.replicas` to 2, and set the producer `acks` to `all`.(min.insync.replicas)",
    "retentionTimeLabelHead": "Retention time",
    "retentionTimeLabelBody": "Retention time is the amount of time that messages are retained in a topic before they are deleted or compacted, depending on the cleanup policy. (retention.ms)",
    "maxMessageSizeLabelHead": "Maximum message size",
    "maxMessageSizeLabelBody": "Maximum message bytes is the maximum record batch size. (max.message.bytes)",
    "messageTimestampLabelHead": "Message timestamp type",
    "messageTimestampLabelBody": "Message timestamp type determines whether the timestamp is generated when the message is created (`CreateTime`) or when the message is appended to the log (`LogAppendTime`). (message.timestamp.type)",
    "messageTimestampDiffLabelHead": "Maximum message timestamp difference",
    "messageTimestampDiffLabelBody": "Maximum message timestamp difference is the maximum difference allowed between the timestamp specified in the message when it leaves the producer and the timestamp recorded when a broker receives the message. (message.timestamp.difference.max.ms)",
    "compressionTypeLabelHead": "Compression type",
    "compressionTypeLabelBody": "Compression type determines the final compression for the topic. The `producer` compression type retains the original compression set by the producer. (compression.type)",
    "messageFormatLabelHead": "Message format version",
    "messageFormatLabelBody": "Message format version is the `ApiVersion` value that the broker uses to append messages to topics. This value must be a valid `ApiVersion` value, such as 0.8.2, 0.9.0.0, or 0.10.0. For more details, see the `ApiVersion` topic configuration.",
    "cleanupPolicyLabelHead": "Cleanup policy",
    "cleanupPolicyLabelBody": "Cleanup policy determines whether messages that reach the retention window are deleted or compacted. (cleanup.policy)",
    "retentionBytesLabelHead": "Retention size",
    "retentionBytesLabelBody": "Retention bytes is the maximum total size of all log segments in a partition before old log segments are deleted to free up space. By default, no retention bytes limit is applied, only a `retention.ms` time limit. This property applies only when the topic cleanup policy is set to `delete`. (retention.bytes)",
    "logSegmentLabelHead": "Log segment size",
    "logSegmentLabelBody": "Log segment size is the size of the log segment files. Log processing actions, such as deletion and compaction, operate on log segments, so a larger setting results in fewer files but less frequent log processing. (segment.bytes)",
    "leaderElectionLabelHead": "Unclean leader election",
    "leaderElectionLabelBody": "Enable unclean leader election allows a follower replica that is not in sync with the partition leader to become the leader of the partition. This property can lead to data loss, so use it only as a way to retain at least partial data if partition leaders are jeopardized. (unclean.leader.election.enable)",
    "followerReplicaLabelHead": "Follower replication throttled replicas",
    "followerReplicaLabelBody": "Follower replication throttled replicas is a list of the replicas that replication should be throttled for among followers. You can use this to limit the network bandwidth consumed by replication. (follower.replication.throttled.replicas)",
    "leaderReplicaLabelHead": "Leader replication throttled replicas",
    "leaderReplicaLabelBody": "Leader replication throttled replicas is a list of the replicas that replication should be throttled for among partition leaders. You can use this to limit the network bandwidth consumed by replication. (leader.replication.throttled.replicas)",
    "deleteRetentionLabelHead": "Delete retention time",
    "deleteRetentionLabelBody": "Delete retention milliseconds is the amount of time that tombstone markers are retained if the topic is compacted. (delete.retention.ms)",
    "minRatioLabelHead": "Minimum cleanable dirty ratio",
    "minRatioLabelBody": "Minimum cleanable dirty ratio is the ratio of entries in the log that can be compacted versus entries that cannot be compacted. When this ratio is reached, the eligible messages in the log are compacted. By default, the ratio is 0.5 or 50%, meaning that messages are compacted after at least half of the log messages are eligible. This property applies only when the topic cleanup policy is set to `compact`. (min.cleanable.dirty.ratio)",
    "minLagLabelHead": "Minimum compaction lag time",
    "minLagLabelBody": "Minimum compaction lag time is the minimum time a message remains uncompacted in a log. This property applies only when the topic cleanup policy is set to `compact`. (min.compaction.lag.ms)",
    "segementTimeLabelHead": "Segment time",
    "segementTimeLabelBody": "Segment time is the amount of time after which the current log segment is rolled even if the segment file is not full. This property ensures that the topic cleanup policy can delete or compact old messages as needed. (segment.ms)",
    "jitterTimeLabelHead": "Segment jitter time",
    "jitterTimeLabelBody": "Segment jitter time is the maximum delay for log segment rolling. This delay prevents bursts of log segment rolling activity. (segment.jitter.ms)",
    "deleteDelayLabelHead": "File delete delay",
    "deleteDelayLabelBody": "File delete delay is the amount of time that a file is retained in the system before the file is deleted. (file.delete.delay.ms)",
    "preallocateLabelHead": "Preallocate log segment files",
    "preallocateLabelBody": "Preallocate log segment files determines whether to preallocate the file on disk when creating a new log segment. This property ensures sufficient disk space for log segments.",
    "indexIntervalLabelHead": "Index interval size",
    "indexIntervalLabelBody": "Index interval bytes is the number of bytes between each index entry to its offset index. The default setting indexes a message about every 4096 bytes. More indexing enables reads to be closer to the exact position in the log but makes the index larger. You typically do not need to change this setting. (index.interval.bytes)",
    "segementIntervalLabelHead": "Segment index size",
    "segementIntervalLabelBody": "Segment index bytes is the size of the index that maps offset to file positions. You typically do not need to change this setting. (segment.index.bytes)",
    "intervalMessagesLabelHead": "Flush interval messages",
    "intervalMessagesLabelBody": "Flush interval messages is the number of messages between each data flush to the log. (flush.messages)",
    "intervalTimeLabelHead": "Flush interval time",
    "intervalTimeLabelBody": "Flush interval time is the amount of time between each data flush to the log. (flush.ms)",
    "coreConfigInfo": "Before deploying your topic, we recommend entering all core configuration details.",
    "messageSectionInfo": "Control how your messages will be handled in the Kafka instance.",
    "logSectionInfo": "Define how your log is handled.",
    "logSectionInfoNote": "Note: Messages are continually appended to the partition’s log and assigned their offset.",
    "replicationSectionInfo": "Control the behavior of your replicas.",
    "replicationSectionInfoNote": "Each of these parameter impacts every replica created in this topic.",
    "cleanupSectionInfo": "Control the cleanup processing of the log.",
    "indexSectionInfo": "Control the indexing of the log.",
    "flushSectionInfo": "Control the frequency of the flushing of the log.",
    "deleteTopicInfo": "This permanently removes this topic from this instance. Applications will no longer have access to this topic."
  }
}
