/* tslint:disable */
/* eslint-disable */
/**
 * Kafka Admin REST API
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 * Key value pair indicating possible configuration options for a topic.
 * @export
 * @interface ConfigEntry
 */
export interface ConfigEntry {
  /**
   * The key indicating what configuration entry you would like to set for the topic.
   * @type {string}
   * @memberof ConfigEntry
   */
  key?: string;
  /**
   * Value to indicate the setting on the topic configuration entry.
   * @type {string}
   * @memberof ConfigEntry
   */
  value?: string;
}
/**
 * A Kafka consumer is responsible for reading records from one or more topics and one or more partitions of a topic.
 * @export
 * @interface Consumer
 */
export interface Consumer {
  /**
   * Unique identifier for the consumer group to which this consumer belongs.
   * @type {string}
   * @memberof Consumer
   */
  groupId: string;
  /**
   * The unique topic name to which this consumer belongs
   * @type {string}
   * @memberof Consumer
   */
  topic: string;
  /**
   * The partition number to which this consumer group is assigned to.
   * @type {number}
   * @memberof Consumer
   */
  partition: number;
  /**
   * Offset denotes the position of the consumer in a partition.
   * @type {number}
   * @memberof Consumer
   */
  offset: number;
  /**
   * The log end offset is the offset of the last message written to a log.
   * @type {number}
   * @memberof Consumer
   */
  logEndOffset?: number;
  /**
   * Offset Lag is the delta between the last produced message and the last consumer\'s committed offset.
   * @type {number}
   * @memberof Consumer
   */
  lag: number;
  /**
   * The member ID is a unique identifier given to a consumer by the coordinator upon initially joining the group.
   * @type {string}
   * @memberof Consumer
   */
  memberId?: string;
}
/**
 * A group of Kafka consumers
 * @export
 * @interface ConsumerGroup
 */
export interface ConsumerGroup {
  /**
   * Unique identifier for the consumer group
   * @type {string}
   * @memberof ConsumerGroup
   */
  groupId: string;
  /**
   * The list of consumers associated with this consumer group
   * @type {Array<Consumer>}
   * @memberof ConsumerGroup
   */
  consumers: Array<Consumer>;
}
/**
 * A list of consumer groups
 * @export
 * @interface ConsumerGroupList
 */
export interface ConsumerGroupList {
  /**
   * Consumer group list items
   * @type {Array<ConsumerGroup>}
   * @memberof ConsumerGroupList
   */
  items: Array<ConsumerGroup>;
  /**
   * The total number of consumer groups.
   * @type {number}
   * @memberof ConsumerGroupList
   */
  count: number;
  /**
   * The number of consumer groups per page.
   * @type {number}
   * @memberof ConsumerGroupList
   */
  limit: number;
  /**
   * The page offset
   * @type {number}
   * @memberof ConsumerGroupList
   */
  offset: number;
}
/**
 * Input object to create a new topic.
 * @export
 * @interface NewTopicInput
 */
export interface NewTopicInput {
  /**
   * The topic name, this value must be unique.
   * @type {string}
   * @memberof NewTopicInput
   */
  name: string;
  /**
   *
   * @type {TopicSettings}
   * @memberof NewTopicInput
   */
  settings?: TopicSettings;
}
/**
 * Kafka topic partition
 * @export
 * @interface Partition
 */
export interface Partition {
  /**
   * Uniquie id for the partition
   * @type {number}
   * @memberof Partition
   */
  id: number;
  /**
   * List of replicas for the partition
   * @type {Array<object>}
   * @memberof Partition
   */
  replicas?: Array<object>;
  /**
   * List isync-replicas for this partition.
   * @type {Array<object>}
   * @memberof Partition
   */
  isr?: Array<object>;
  /**
   * Kafka server / broker.
   * @type {object}
   * @memberof Partition
   */
  leader?: object;
}
/**
 * Kafka Topic (A feed where records are stored and published)
 * @export
 * @interface Topic
 */
export interface Topic {
  /**
   * The name of the topic.
   * @type {string}
   * @memberof Topic
   */
  name?: string;
  /**
   * Topic configuration entry.
   * @type {Array<ConfigEntry>}
   * @memberof Topic
   */
  config?: Array<ConfigEntry>;
  /**
   * Partitions for this topic.
   * @type {Array<Partition>}
   * @memberof Topic
   */
  partitions?: Array<Partition>;
}
/**
 * Kafka Topic (A feed where records are stored and published)
 * @export
 * @interface TopicSettings
 */
export interface TopicSettings {
  /**
   * Number of partitions for this topic.
   * @type {number}
   * @memberof TopicSettings
   */
  numPartitions?: number;
  /**
   * Topic configuration entry.
   * @type {Array<ConfigEntry>}
   * @memberof TopicSettings
   */
  config?: Array<ConfigEntry>;
}
/**
 * A list of topics.
 * @export
 * @interface TopicsList
 */
export interface TopicsList {
  /**
   * The page offset
   * @type {number}
   * @memberof TopicsList
   */
  offset: number;
  /**
   * number of entries per page
   * @type {number}
   * @memberof TopicsList
   */
  limit: number;
  /**
   * Total number of topics
   * @type {number}
   * @memberof TopicsList
   */
  count: number;
  /**
   * List of topics
   * @type {Array<Topic>}
   * @memberof TopicsList
   */
  items: Array<Topic>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTopic: async (
      newTopicInput: NewTopicInput,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'newTopicInput' is not null or undefined
      if (newTopicInput === null || newTopicInput === undefined) {
        throw new RequiredError(
          'newTopicInput',
          'Required parameter newTopicInput was null or undefined when calling createTopic.'
        );
      }
      const localVarPath = `/topics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const nonString = typeof newTopicInput !== 'string';
      const needsSerialization =
        nonString && configuration && configuration.isJsonMime
          ? configuration.isJsonMime(
              localVarRequestOptions.headers['Content-Type']
            )
          : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(newTopicInput !== undefined ? newTopicInput : {})
        : newTopicInput || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId The unique name of the topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerGroupById: async (
      consumerGroupId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'consumerGroupId' is not null or undefined
      if (consumerGroupId === null || consumerGroupId === undefined) {
        throw new RequiredError(
          'consumerGroupId',
          'Required parameter consumerGroupId was null or undefined when calling deleteConsumerGroupById.'
        );
      }
      const localVarPath = `/consumer-groups/{consumerGroupId}`.replace(
        `{${'consumerGroupId'}}`,
        encodeURIComponent(String(consumerGroupId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      groupName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupName' is not null or undefined
      if (groupName === null || groupName === undefined) {
        throw new RequiredError(
          'groupName',
          'Required parameter groupName was null or undefined when calling deleteGroup.'
        );
      }
      const localVarPath = `/groups/{groupName}`.replace(
        `{${'groupName'}}`,
        encodeURIComponent(String(groupName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a  topic
     * @param {string} topicName The topic name to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTopic: async (
      topicName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'topicName' is not null or undefined
      if (topicName === null || topicName === undefined) {
        throw new RequiredError(
          'topicName',
          'Required parameter topicName was null or undefined when calling deleteTopic.'
        );
      }
      const localVarPath = `/topics/{topicName}`.replace(
        `{${'topicName'}}`,
        encodeURIComponent(String(topicName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId The unique ID of the consumer group
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupById: async (
      consumerGroupId: string,
      topic?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'consumerGroupId' is not null or undefined
      if (consumerGroupId === null || consumerGroupId === undefined) {
        throw new RequiredError(
          'consumerGroupId',
          'Required parameter consumerGroupId was null or undefined when calling getConsumerGroupById.'
        );
      }
      const localVarPath = `/consumer-groups/{consumerGroupId}`.replace(
        `{${'consumerGroupId'}}`,
        encodeURIComponent(String(consumerGroupId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (topic !== undefined) {
        localVarQueryParameter['topic'] = topic;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [limit] Maximum number of consumer groups to returnd
     * @param {number} [offset] The page offset when returning the list of consumer groups
     * @param {string} [topic] Filter to apply when returning the list of consumer groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupList: async (
      limit?: number,
      offset?: number,
      topic?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/consumer-groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (topic !== undefined) {
        localVarQueryParameter['topic'] = topic;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup: async (
      groupName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupName' is not null or undefined
      if (groupName === null || groupName === undefined) {
        throw new RequiredError(
          'groupName',
          'Required parameter groupName was null or undefined when calling getGroup.'
        );
      }
      const localVarPath = `/groups/{groupName}`.replace(
        `{${'groupName'}}`,
        encodeURIComponent(String(groupName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupsList: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Topic
     * @summary Retrieves the topic with the specified name.
     * @param {string} topicName The topic name to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic: async (
      topicName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'topicName' is not null or undefined
      if (topicName === null || topicName === undefined) {
        throw new RequiredError(
          'topicName',
          'Required parameter topicName was null or undefined when calling getTopic.'
        );
      }
      const localVarPath = `/topics/{topicName}`.replace(
        `{${'topicName'}}`,
        encodeURIComponent(String(topicName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @summary List of topics
     * @param {number} [limit] Maximum number of topics to return
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [offset] The page offset when returning  the limit of requested topics.
     * @param {string} [order] Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopicsList: async (
      limit?: number,
      filter?: string,
      offset?: number,
      order?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/topics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (order !== undefined) {
        localVarQueryParameter['order'] = order;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Admin server metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metrics: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/metrics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openApi: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId The ID of the consumer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConsumerGroupOffset: async (
      consumerGroupId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'consumerGroupId' is not null or undefined
      if (consumerGroupId === null || consumerGroupId === undefined) {
        throw new RequiredError(
          'consumerGroupId',
          'Required parameter consumerGroupId was null or undefined when calling resetConsumerGroupOffset.'
        );
      }
      const localVarPath = `/consumer-groups/{consumerGroupId}/reset-offset`.replace(
        `{${'consumerGroupId'}}`,
        encodeURIComponent(String(consumerGroupId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * updates the topic with the new data.
     * @summary Updates the topic with the specified name.
     * @param {string} topicName The topic name which is its unique id.
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTopic: async (
      topicName: string,
      topicSettings: TopicSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'topicName' is not null or undefined
      if (topicName === null || topicName === undefined) {
        throw new RequiredError(
          'topicName',
          'Required parameter topicName was null or undefined when calling updateTopic.'
        );
      }
      // verify required parameter 'topicSettings' is not null or undefined
      if (topicSettings === null || topicSettings === undefined) {
        throw new RequiredError(
          'topicSettings',
          'Required parameter topicSettings was null or undefined when calling updateTopic.'
        );
      }
      const localVarPath = `/topics/{topicName}`.replace(
        `{${'topicName'}}`,
        encodeURIComponent(String(topicName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const nonString = typeof topicSettings !== 'string';
      const needsSerialization =
        nonString && configuration && configuration.isJsonMime
          ? configuration.isJsonMime(
              localVarRequestOptions.headers['Content-Type']
            )
          : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(topicSettings !== undefined ? topicSettings : {})
        : topicSettings || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTopic(
      newTopicInput: NewTopicInput,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).createTopic(newTopicInput, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId The unique name of the topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteConsumerGroupById(
      consumerGroupId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).deleteConsumerGroupById(consumerGroupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      groupName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).deleteGroup(groupName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a  topic
     * @param {string} topicName The topic name to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTopic(
      topicName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).deleteTopic(topicName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId The unique ID of the consumer group
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConsumerGroupById(
      consumerGroupId: string,
      topic?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroup>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getConsumerGroupById(consumerGroupId, topic, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [limit] Maximum number of consumer groups to returnd
     * @param {number} [offset] The page offset when returning the list of consumer groups
     * @param {string} [topic] Filter to apply when returning the list of consumer groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConsumerGroupList(
      limit?: number,
      offset?: number,
      topic?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ConsumerGroupList>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getConsumerGroupList(limit, offset, topic, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroup(
      groupName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getGroup(groupName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroupsList(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getGroupsList(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Topic
     * @summary Retrieves the topic with the specified name.
     * @param {string} topicName The topic name to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTopic(
      topicName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getTopic(topicName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @summary List of topics
     * @param {number} [limit] Maximum number of topics to return
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [offset] The page offset when returning  the limit of requested topics.
     * @param {string} [order] Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTopicsList(
      limit?: number,
      filter?: string,
      offset?: number,
      order?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsList>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getTopicsList(limit, filter, offset, order, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Admin server metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metrics(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).metrics(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async openApi(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).openApi(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId The ID of the consumer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetConsumerGroupOffset(
      consumerGroupId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroup>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).resetConsumerGroupOffset(consumerGroupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * updates the topic with the new data.
     * @summary Updates the topic with the specified name.
     * @param {string} topicName The topic name which is its unique id.
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTopic(
      topicName: string,
      topicSettings: TopicSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).updateTopic(topicName, topicSettings, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTopic(
      newTopicInput: NewTopicInput,
      options?: any
    ): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .createTopic(newTopicInput, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId The unique name of the topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerGroupById(
      consumerGroupId: string,
      options?: any
    ): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .deleteConsumerGroupById(consumerGroupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupName: string, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .deleteGroup(groupName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a  topic
     * @param {string} topicName The topic name to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTopic(topicName: string, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .deleteTopic(topicName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId The unique ID of the consumer group
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupById(
      consumerGroupId: string,
      topic?: string,
      options?: any
    ): AxiosPromise<ConsumerGroup> {
      return DefaultApiFp(configuration)
        .getConsumerGroupById(consumerGroupId, topic, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [limit] Maximum number of consumer groups to returnd
     * @param {number} [offset] The page offset when returning the list of consumer groups
     * @param {string} [topic] Filter to apply when returning the list of consumer groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupList(
      limit?: number,
      offset?: number,
      topic?: string,
      options?: any
    ): AxiosPromise<ConsumerGroupList> {
      return DefaultApiFp(configuration)
        .getConsumerGroupList(limit, offset, topic, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} groupName Consumer group identificator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupName: string, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .getGroup(groupName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupsList(options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .getGroupsList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Topic
     * @summary Retrieves the topic with the specified name.
     * @param {string} topicName The topic name to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic(topicName: string, options?: any): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .getTopic(topicName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @summary List of topics
     * @param {number} [limit] Maximum number of topics to return
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [offset] The page offset when returning  the limit of requested topics.
     * @param {string} [order] Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopicsList(
      limit?: number,
      filter?: string,
      offset?: number,
      order?: string,
      options?: any
    ): AxiosPromise<TopicsList> {
      return DefaultApiFp(configuration)
        .getTopicsList(limit, filter, offset, order, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Admin server metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metrics(options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .metrics(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openApi(options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration)
        .openApi(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId The ID of the consumer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConsumerGroupOffset(
      consumerGroupId: string,
      options?: any
    ): AxiosPromise<ConsumerGroup> {
      return DefaultApiFp(configuration)
        .resetConsumerGroupOffset(consumerGroupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * updates the topic with the new data.
     * @summary Updates the topic with the specified name.
     * @param {string} topicName The topic name which is its unique id.
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTopic(
      topicName: string,
      topicSettings: TopicSettings,
      options?: any
    ): AxiosPromise<Topic> {
      return DefaultApiFp(configuration)
        .updateTopic(topicName, topicSettings, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   * Creates a new topic for Kafka.
   * @summary Creates a new topic
   * @param {NewTopicInput} newTopicInput Topic to create.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  createTopic(newTopicInput: NewTopicInput, options?: any): AxiosPromise<Topic>;

  /**
   * Delete a consumer group, along with its consumers.
   * @summary Delete a consumer group.
   * @param {string} consumerGroupId The unique name of the topic.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  deleteConsumerGroupById(
    consumerGroupId: string,
    options?: any
  ): AxiosPromise<void>;

  /**
   *
   * @param {string} groupName Consumer group identificator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  deleteGroup(groupName: string, options?: any): AxiosPromise<void>;

  /**
   * Deletes the topic with the specified name.
   * @summary Deletes a  topic
   * @param {string} topicName The topic name to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  deleteTopic(topicName: string, options?: any): AxiosPromise<void>;

  /**
   *
   * @summary Get a single consumer group by its unique ID.
   * @param {string} consumerGroupId The unique ID of the consumer group
   * @param {string} [topic] Filter consumer groups for a specific topic
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getConsumerGroupById(
    consumerGroupId: string,
    topic?: string,
    options?: any
  ): AxiosPromise<ConsumerGroup>;

  /**
   * Returns a list of all consumer groups for a particular Kafka instance.
   * @summary List of consumer groups in the Kafka instance.
   * @param {number} [limit] Maximum number of consumer groups to returnd
   * @param {number} [offset] The page offset when returning the list of consumer groups
   * @param {string} [topic] Filter to apply when returning the list of consumer groups
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getConsumerGroupList(
    limit?: number,
    offset?: number,
    topic?: string,
    options?: any
  ): AxiosPromise<ConsumerGroupList>;

  /**
   *
   * @param {string} groupName Consumer group identificator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getGroup(groupName: string, options?: any): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getGroupsList(options?: any): AxiosPromise<void>;

  /**
   * Topic
   * @summary Retrieves the topic with the specified name.
   * @param {string} topicName The topic name to retrieve.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getTopic(topicName: string, options?: any): AxiosPromise<Topic>;

  /**
   * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
   * @summary List of topics
   * @param {number} [limit] Maximum number of topics to return
   * @param {string} [filter] Filter to apply when returning the list of topics
   * @param {number} [offset] The page offset when returning  the limit of requested topics.
   * @param {string} [order] Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getTopicsList(
    limit?: number,
    filter?: string,
    offset?: number,
    order?: string,
    options?: any
  ): AxiosPromise<TopicsList>;

  /**
   *
   * @summary Admin server metrics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  metrics(options?: any): AxiosPromise<void>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  openApi(options?: any): AxiosPromise<void>;

  /**
   * Reset the offset for a particular consumer group.
   * @summary Reset the offset for a consumer group.
   * @param {string} consumerGroupId The ID of the consumer group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  resetConsumerGroupOffset(
    consumerGroupId: string,
    options?: any
  ): AxiosPromise<ConsumerGroup>;

  /**
   * updates the topic with the new data.
   * @summary Updates the topic with the specified name.
   * @param {string} topicName The topic name which is its unique id.
   * @param {TopicSettings} topicSettings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  updateTopic(
    topicName: string,
    topicSettings: TopicSettings,
    options?: any
  ): AxiosPromise<Topic>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   * Creates a new topic for Kafka.
   * @summary Creates a new topic
   * @param {NewTopicInput} newTopicInput Topic to create.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createTopic(newTopicInput: NewTopicInput, options?: any) {
    return DefaultApiFp(this.configuration)
      .createTopic(newTopicInput, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a consumer group, along with its consumers.
   * @summary Delete a consumer group.
   * @param {string} consumerGroupId The unique name of the topic.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteConsumerGroupById(consumerGroupId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteConsumerGroupById(consumerGroupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} groupName Consumer group identificator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteGroup(groupName: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteGroup(groupName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes the topic with the specified name.
   * @summary Deletes a  topic
   * @param {string} topicName The topic name to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTopic(topicName: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteTopic(topicName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a single consumer group by its unique ID.
   * @param {string} consumerGroupId The unique ID of the consumer group
   * @param {string} [topic] Filter consumer groups for a specific topic
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConsumerGroupById(
    consumerGroupId: string,
    topic?: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .getConsumerGroupById(consumerGroupId, topic, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a list of all consumer groups for a particular Kafka instance.
   * @summary List of consumer groups in the Kafka instance.
   * @param {number} [limit] Maximum number of consumer groups to returnd
   * @param {number} [offset] The page offset when returning the list of consumer groups
   * @param {string} [topic] Filter to apply when returning the list of consumer groups
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getConsumerGroupList(
    limit?: number,
    offset?: number,
    topic?: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .getConsumerGroupList(limit, offset, topic, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} groupName Consumer group identificator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getGroup(groupName: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getGroup(groupName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getGroupsList(options?: any) {
    return DefaultApiFp(this.configuration)
      .getGroupsList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Topic
   * @summary Retrieves the topic with the specified name.
   * @param {string} topicName The topic name to retrieve.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTopic(topicName: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getTopic(topicName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
   * @summary List of topics
   * @param {number} [limit] Maximum number of topics to return
   * @param {string} [filter] Filter to apply when returning the list of topics
   * @param {number} [offset] The page offset when returning  the limit of requested topics.
   * @param {string} [order] Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTopicsList(
    limit?: number,
    filter?: string,
    offset?: number,
    order?: string,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .getTopicsList(limit, filter, offset, order, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Admin server metrics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public metrics(options?: any) {
    return DefaultApiFp(this.configuration)
      .metrics(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public openApi(options?: any) {
    return DefaultApiFp(this.configuration)
      .openApi(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Reset the offset for a particular consumer group.
   * @summary Reset the offset for a consumer group.
   * @param {string} consumerGroupId The ID of the consumer group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public resetConsumerGroupOffset(consumerGroupId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .resetConsumerGroupOffset(consumerGroupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * updates the topic with the new data.
   * @summary Updates the topic with the specified name.
   * @param {string} topicName The topic name which is its unique id.
   * @param {TopicSettings} topicSettings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateTopic(
    topicName: string,
    topicSettings: TopicSettings,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .updateTopic(topicName, topicSettings, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
